// src/hooks/useFlowData.ts
import { useCallback, useEffect, useRef, useState } from "react";
import { useNodesState, useEdgesState, useReactFlow } from "@xyflow/react";
import {
  applyLayout,
  transformApiDataToFlow,
  transformApiDataToFlowAlternative,
} from "../utils/dataTransformer";
import type { CustomNode, CustomEdge, ApiResponse } from "../types";

const edgeStyles = {
  stroke: "#b1b1b7",
  strokeWidth: 2,
};

export const useFlowData = (apiData?: ApiResponse | null) => {
  const [nodes, setNodes, onNodesChange] = useNodesState<CustomNode>([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState<CustomEdge>([]);
  const { fitView, getNodes, getEdges } = useReactFlow();

  const dataProcessedRef = useRef(false);
  const initialLoadRef = useRef(true);
  const [flowKey, setFlowKey] = useState(0);
  const prevApiDataRef = useRef<ApiResponse | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ React Flow
  const processData = useCallback(() => {
    if (!apiData?.nodes || apiData.nodes.length === 0) {
      console.log("‚ùå No data to process");
      return false;
    }

    try {
      console.log("üîÑ Processing API data:", apiData);

      let flowData;
      let transformerUsed = "main";

      try {
        flowData = transformApiDataToFlow(apiData);

        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –≤–µ—Ä–Ω—É–ª —É–∑–ª—ã –Ω–æ –Ω–µ—Ç —Å–≤—è–∑–µ–π, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
        if (flowData.nodes.length > 0 && flowData.edges.length === 0) {
          console.warn(
            "‚ö†Ô∏è Main transformer returned nodes but no edges, trying alternative"
          );
          const altFlowData = transformApiDataToFlowAlternative(apiData);
          if (altFlowData.edges.length > 0) {
            flowData = altFlowData;
            transformerUsed = "alternative";
          }
        }
      } catch (error) {
        console.error("‚ùå Main transformer failed, using alternative:", error);
        flowData = transformApiDataToFlowAlternative(apiData);
        transformerUsed = "alternative";
      }

      console.log(`‚úÖ ${transformerUsed} transformer result:`, {
        nodes: flowData.nodes.length,
        edges: flowData.edges.length,
      });

      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —É–∑–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–∑–ª—ã –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
      if (flowData.nodes.length === 0) {
        console.warn("‚ö†Ô∏è No nodes created, creating basic nodes from API data");
        flowData.nodes = apiData.nodes.map((item, index) => {
          const nodeId = item["Id —É–∑–ª–∞"] || item.id || `node-${index}`;
          const nodeType = item["–¢–∏–ø"] || item.type || "";
          const nodeName = item["–ù–∞–∑–≤–∞–Ω–∏–µ"] || item.name || `Node ${index}`;

          const flowNodeType = String(nodeType)
            .toLowerCase()
            .includes("–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
            ? "transformation"
            : "product";

          return {
            id: String(nodeId),
            type: flowNodeType,
            position: { x: 0, y: index * 100 },
            data: {
              label: String(nodeName),
              description: String(item["–û–ø–∏—Å–∞–Ω–∏–µ"] || item.description || ""),
              originalData: item,
            },
            draggable: true,
          };
        });
      }

      const improvedEdges = flowData.edges.map((edge: CustomEdge) => ({
        ...edge,
        label: undefined,
        style: edgeStyles,
        type: "smoothstep",
        animated: false,
      }));

      console.log("üé® Applying layout...");
      const { nodes: layoutedNodes, edges: layoutedEdges } = applyLayout(
        flowData.nodes,
        improvedEdges,
        "TB"
      );

      console.log("üöÄ Setting nodes and edges:", {
        nodes: layoutedNodes.length,
        edges: layoutedEdges.length,
      });

      setNodes(layoutedNodes);
      setEdges(layoutedEdges);

      dataProcessedRef.current = true;
      initialLoadRef.current = false;

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä
      setFlowKey((prev) => prev + 1);

      console.log("üéØ Data processing completed successfully");

      // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ fitView —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
      setTimeout(() => {
        console.log("üîç First fitView attempt");
        fitView({ duration: 800, padding: 0.2 });
      }, 100);

      setTimeout(() => {
        console.log("üîç Second fitView attempt");
        fitView({ duration: 800, padding: 0.2 });
      }, 500);

      return true;
    } catch (error) {
      console.error("üí• Error in processData:", error);
      dataProcessedRef.current = false;
      return false;
    }
  }, [apiData, setNodes, setEdges, fitView]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefreshView = useCallback(() => {
    console.log("üîÑ Manual refresh triggered");

    dataProcessedRef.current = false;
    initialLoadRef.current = true;

    const success = processData();

    if (!success && apiData?.nodes && apiData.nodes.length > 0) {
      // –ï—Å–ª–∏ processData –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
      console.log("üîÑ Forcing data refresh with alternative transformer");
      const flowData = transformApiDataToFlowAlternative(apiData);
      setNodes(flowData.nodes);
      setEdges(flowData.edges);

      setTimeout(() => {
        fitView({ duration: 800, padding: 0.2 });
      }, 100);

      return true;
    }

    return success;
  }, [apiData, processData, setNodes, setEdges, fitView]);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ layout
  const applyFlowLayout = useCallback(
    (direction: "TB" | "LR" = "TB") => {
      const currentNodes = getNodes() as CustomNode[];
      const currentEdges = getEdges() as CustomEdge[];

      if (currentNodes.length === 0) {
        console.warn("‚ö†Ô∏è No nodes to layout");
        return;
      }

      console.log(
        `üé® Applying ${direction} layout to ${currentNodes.length} nodes and ${currentEdges.length} edges...`
      );

      const { nodes: layoutedNodes, edges: layoutedEdges } = applyLayout(
        currentNodes,
        currentEdges,
        direction
      );

      setNodes(layoutedNodes);
      setEdges(layoutedEdges);

      setTimeout(() => {
        fitView({ duration: 800, padding: 0.2 });
        console.log("‚úÖ Layout applied and view fitted");
      }, 100);
    },
    [getNodes, getEdges, setNodes, setEdges, fitView]
  );

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    console.log("üì¶ API Data changed:", {
      hasData: !!apiData,
      nodesCount: apiData?.nodes?.length,
      prevNodesCount: prevApiDataRef.current?.nodes?.length,
    });

    if (apiData?.nodes && apiData.nodes.length > 0) {
      console.log("üéØ Data available, processing...");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
      const dataChanged =
        JSON.stringify(apiData) !== JSON.stringify(prevApiDataRef.current);

      if (dataChanged || !dataProcessedRef.current) {
        console.log("üîÑ Data changed or not processed, calling processData");
        const success = processData();

        if (success) {
          prevApiDataRef.current = apiData;
        } else {
          console.error("‚ùå processData failed, data not cached");
        }
      } else {
        console.log("‚ö° Data unchanged, skipping processing");
      }
    } else if (
      apiData === null ||
      (apiData?.nodes && apiData.nodes.length === 0)
    ) {
      console.log("‚ö†Ô∏è No data or empty data, resetting");
      setNodes([]);
      setEdges([]);
      dataProcessedRef.current = false;
      prevApiDataRef.current = null;
    }
  }, [apiData, processData, setNodes, setEdges]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (nodes.length > 0 && initialLoadRef.current) {
      console.log("üéâ First load with nodes, triggering re-render");
      setFlowKey((prev) => prev + 1);
      initialLoadRef.current = false;
    }
  }, [nodes.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è edges (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é)
  const setEdgesManual = useCallback(
    (edges: CustomEdge[] | ((edges: CustomEdge[]) => CustomEdge[])) => {
      if (typeof edges === "function") {
        setEdges(edges);
      } else {
        setEdges(edges);
      }
    },
    [setEdges]
  );

  const forceUpdateNodes = useCallback(() => {
    if (apiData) {
      const flowData = transformApiDataToFlow(apiData);
      setNodes(flowData.nodes);
      setEdges(flowData.edges);
    }
  }, [apiData, setNodes, setEdges]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    nodes,
    edges,

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    onNodesChange,
    onEdgesChange,

    // –°–µ—Ç—Ç–µ—Ä—ã
    setNodes,
    setEdges: setEdgesManual,

    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    handleRefreshView,
    applyFlowLayout,
    forceUpdateNodes,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    dataProcessed: dataProcessedRef.current,
    initialLoad: initialLoadRef.current,
    flowKey,

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    reprocessData: processData,
  };
};
