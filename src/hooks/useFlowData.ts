import { useCallback, useEffect, useRef, useState } from 'react';
import { useNodesState, useEdgesState, useReactFlow } from '@xyflow/react';
import { applyLayout, transformApiDataToFlow } from '../utils/dataTransformer';
import { fallbackTransform } from '../utils/fallback';
import type { CustomNode, CustomEdge, ApiResponse } from '../types';

const edgeStyles = {
  stroke: "#b1b1b7",
  strokeWidth: 2,
};

export const useFlowData = (apiData?: ApiResponse | null) => {
  const [nodes, setNodes, onNodesChange] = useNodesState<CustomNode>([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState<CustomEdge>([]);
  const { fitView } = useReactFlow();
  
  const dataProcessedRef = useRef(false);
  const initialLoadRef = useRef(true);
  const [flowKey, setFlowKey] = useState(0);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ React Flow
  const processData = useCallback(() => {
    if (!apiData?.nodes || apiData.nodes.length === 0) {
      console.log('‚ùå No data to process');
      return false;
    }

    try {
      console.log('üîÑ Processing API data:', apiData);
      
      let flowData;
      try {
        flowData = transformApiDataToFlow(apiData);
      } catch (error) {
        console.error('‚ùå Main transformer failed, using fallback:', error);
        flowData = fallbackTransform(apiData);
      }

      // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ —É–∑–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (flowData.nodes.length === 0) {
        console.warn('‚ö†Ô∏è Main transformer returned empty nodes, using fallback');
        flowData = fallbackTransform(apiData);
      }

      console.log('‚úÖ transformApiDataToFlow result:', { 
        nodes: flowData.nodes.length, 
        edges: flowData.edges.length 
      });

      const improvedEdges = flowData.edges.map((edge) => ({
        ...edge,
        label: undefined,
        style: edgeStyles,
        type: "smoothstep",
        animated: false,
      }));

      console.log('üé® Applying layout...');
      const { nodes: layoutedNodes, edges: layoutedEdges } = applyLayout(
        flowData.nodes, 
        improvedEdges, 
        "TB"
      );

      console.log('üöÄ Setting nodes and edges:', {
        nodes: layoutedNodes.length,
        edges: layoutedEdges.length
      });

      setNodes(layoutedNodes);
      setEdges(layoutedEdges);
      
      dataProcessedRef.current = true;
      initialLoadRef.current = false;

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä
      setFlowKey(prev => prev + 1);

      console.log('üéØ Data processing completed successfully');

      // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ fitView —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
      setTimeout(() => {
        console.log('üîç First fitView attempt');
        fitView({ duration: 800, padding: 0.2 });
      }, 100);

      setTimeout(() => {
        console.log('üîç Second fitView attempt');
        fitView({ duration: 800, padding: 0.2 });
      }, 500);

      return true;
    } catch (error) {
      console.error('üí• Error in processData:', error);
      dataProcessedRef.current = false;
      return false;
    }
  }, [apiData, setNodes, setEdges, fitView]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefreshView = useCallback(() => {
    console.log('üîÑ Manual refresh triggered');
    
    dataProcessedRef.current = false;
    initialLoadRef.current = true;
    
    const success = processData();
    
    if (!success && apiData?.nodes && apiData.nodes.length > 0) {
      // –ï—Å–ª–∏ processData –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º —á–µ—Ä–µ–∑ fallback
      console.log('üîÑ Forcing data refresh with fallback');
      const flowData = fallbackTransform(apiData);
      setNodes(flowData.nodes);
      setEdges(flowData.edges);
      
      setTimeout(() => {
        fitView({ duration: 800, padding: 0.2 });
      }, 100);
    }
    
    return success;
  }, [apiData, processData, setNodes, setEdges, fitView]);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ layout
  const applyFlowLayout = useCallback((direction: "TB" | "LR") => {
    const { nodes: layoutedNodes, edges: layoutedEdges } = applyLayout(nodes, edges, direction);
    setNodes(layoutedNodes);
    setEdges(layoutedEdges);
    setTimeout(() => fitView({ duration: 800, padding: 0.2 }), 100);
  }, [nodes, edges, setNodes, setEdges, fitView]);

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    console.log('üì¶ API Data changed:', apiData);
    console.log('üìä apiData nodes count:', apiData?.nodes?.length);
    
    if (apiData?.nodes && apiData.nodes.length > 0) {
      console.log('üéØ Data available, processing...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
      const dataChanged = JSON.stringify(apiData) !== JSON.stringify(prevApiDataRef.current);
      
      if (dataChanged || !dataProcessedRef.current) {
        console.log('üîÑ Data changed or not processed, calling processData');
        processData();
        prevApiDataRef.current = apiData;
      } else {
        console.log('‚ö° Data unchanged, skipping processing');
      }
    } else {
      console.log('‚ö†Ô∏è No data or empty data, resetting');
      setNodes([]);
      setEdges([]);
      dataProcessedRef.current = false;
    }
  }, [apiData, processData, setNodes, setEdges]);

  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const prevApiDataRef = useRef<ApiResponse | null>(null);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (nodes.length > 0 && initialLoadRef.current) {
      console.log('üéâ First load with nodes, triggering re-render');
      setFlowKey(prev => prev + 1);
      initialLoadRef.current = false;
    }
  }, [nodes.length]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    nodes,
    edges,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    onNodesChange,
    onEdgesChange,
    
    // –°–µ—Ç—Ç–µ—Ä—ã
    setNodes,
    setEdges,
    
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    handleRefreshView,
    applyFlowLayout,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    dataProcessed: dataProcessedRef.current,
    initialLoad: initialLoadRef.current,
    flowKey,
  };
};